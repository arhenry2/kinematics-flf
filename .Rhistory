# New mle function that tests for outliers
curMaxret = mle(ll, start = list(x0 = x0i, vf=vfi, k=ki, n=ni), method = "BFGS", control = list(maxit = maxitr, reltol = reltol))
list(coeffs = curMaxret, mle = curMax)
coeffs <- list(coeffs = curMaxret, mle = curMax)
}
print(c("coeffs:", curMaxret))
return(curMaxret)
coeffs
}
fitTryData <- fit_flf_1(gTruthPosVel_1)
fit_flf_1 <- function(inputList){
library(stats4)
# number we're using to define half width of the uniform distributions used for restarts (used in vfH, kH, nH)
## Note: used as st dev for rnorm() below
per = 0.1
pos <- gTruthPosVel_1$pos
vel <- gTruthPosVel_1$vel
# sort vf from highest to lowest values
svel <- sort(vel, decreasing = TRUE)
# grab highest 100 vf values
vfi <- mean(svel[1:100])
print(c("mean of highest vf values", vfi))
# find percent of vfi
vfH <- vfi*per
v0i <- mean(vel)
print(c("mean of vel values", v0i))
x0i <- mean(pos)
print(c("mean of pos values", x0i))
x0H <- x0i*per
ni <- 1.2
nH <- ni*per
ki <- .008
kH <- ki*per
# added 11.19.2019 to see if number of iterations through mle changes the estimated parameter values
## default = 100, had at 500 on 11.19.2019
# maxitr = 100
maxitr = 100
# added 11.19.2019 to see if difference between values at interations changes the estimated parameter values
## default = 1e-8, had at 1e-20 on 11.19.2019
# reltol = 1e-20
reltol = 1e-100
# reN = 5
reN = 10
ll <- function(x0,vf,k,n){
velp <- flf(pos,x0,vf,k,n)
res <- vel-velp # calc's residuals
# -sum(log(dnorm(res,0,1))) # old way before 3.2.2020
# -mean(log(dnorm(res, 0, 0.1))) # new way on 11.10.2020, gives probability of your residuals falling into a N dist (assuming N dist.)
-log(mean(dnorm(res,0,1))) #sd = 0.001
#-sum(log(dnorm(res,0,0.1))) # Tried new one on 3.2.2020
# -mean(log(dnorm(res,0,1)))
}
curMax = 0
curMaxret = 0
for (i in 1:reN){
# Define new range for x0i (add noise for where computer will start looking for max likelihood estimate for parameter x0)
x0ii = rnorm(1, mean = x0i, sd = x0H)
# Ditto as above, but for vf
vfii = rnorm(1, mean = vfi, sd = vfH)
# Ditto as above, but for k
kii = rnorm(1, mean = ki, sd = kH)
# Ditto as above, but for n
nii = rnorm(1, mean = ni, sd = nH)
start = list(x0 = 658.9043,	vf = 1.0581177,	k = 0.014531372,	n = 2.9281828) # type in answer: 658.90430000   1.05811770   0.01453137   2.92818280
# print(start)
ret <- mle(ll, start, method = "BFGS", control = list(maxit = maxitr, reltol = reltol))
curV <- ll(coef(ret)[[1]], coef(ret)[[2]], coef(ret)[[3]], coef(ret)[[4]])
if (curV > curMax){
curMax = curV
curMaxret = ret
}
# ret <- mle(ll, start = list(x0 = x0i,vf=vfi, k=ki, n=ni), method = "BFGS", control = list(maxit = maxitr, reltol = reltol))
# ll(coef(ret)[[1]], coef(ret)[[2]], coef(ret)[[3]], coef(ret)[[4]])
# mle(ll, start = list(x0 = x0i,vf=vfi, k=ki, n=ni)) # Original mle function w/out testing parameters for outliers
# mle(ll, start = list(x0 = x0i,vf=vfi, k=ki, n=ni), method = "BFGS", control = list(maxit = maxitr, reltol = reltol)) # New mle function that tests for outliers
# New mle function that tests for outliers
curMaxret = mle(ll, start = list(x0 = x0i, vf=vfi, k=ki, n=ni), method = "BFGS", control = list(maxit = maxitr, reltol = reltol))
list(coeffs = curMaxret, mle = curMax)
coeffs <- list(coeffs = curMaxret, mle = curMax)
}
print(c("coeffs:", curMaxret))
return(curMaxret)
coeffs
}
fitTryData <- fit_flf_1(gTruthPosVel_1)
f <- y ~ (vf)/(1+exp(-k*(x-x0)))^(1/n)
f
class(f)
l = list(x = 5, x0 = 1, vf = 1.5, k = 0.01, n = 1)
l
model(f, l)
?model()
eval(f,l)
evaluate(f, l)
evaluate::evaluate(f, l)
f, l
f(l)
f.e
f.e(l)
return(f, l)
flff <- function(){
f <- y ~ (vf)/(1+exp(-k*(x-x0)))^(1/n)
}
flff(l)
flff(f,l)
flff()
model.frame(f, data = l)
model.frame(f, l)
f <- y ~ vf + k
model.frame(f, l)
l
l = list(x = 5, y = 1, vf = 1.5, k = -0.01)
model.frame(f, l)
x
l = list(y = c(5,42, 6, 2, 0), x = c(1,2,3,4,5))
class(l)
f = y ~ x
nls(f, l)
class(f)
ftry = 5 ~ 2
ftry
y = c(5,42, 6, 2, 0)
x = c(1,2,3,4,5)
f <- y ~ m*x + b
nls(f, start=list(m=1, b=1)))
nls(f, start=list(m=1, b=1))
fflf <- function(y, x, x0, vf, k, n){
f <- y ~ (vf)/(1+exp(-k*(x-x0)))^(1/n)
m <- nls(f, start = list(x0 = 1, vf = 1, k = 0.01, n = 1))
m
}
posVel = read.csv("~/Desktop/RILPop_tmp/RIL1_1/RIL1--RIL1_001_1.5--/rawData.csv")
View(posVel)
class(posVel)
posVel = read.csv("~/Desktop/RILPop_tmp/RIL1_1/RIL1--RIL1_001_1.5--/rawData.csv", header = TRUE)
posVel = read.csv("~/Desktop/RILPop_tmp/RIL1_1/RIL1--RIL1_001_1.5--/rawData.csv", header = FALSE)
posVel$V1
fflf
fflf(x0 = 600, vf = 1.5, k = 0.001, n = 1)
fflf(posVel$V2, posVel$V1, x0 = 600, vf = 1.5, k = 0.001, n = 1)
fflf <- function(y, x, ix0, ivf, ik, iN){
f <- y ~ (vf)/(1+exp(-k*(x-x0)))^(1/n)
m <- nls(f, start = list(x0 = ix0, vf = ivf, k = ik, n = iN))
m
}
fflf(posVel$V2, posVel$V1, x0 = 600, vf = 1.5, k = 0.001, n = 1)
fflf(posVel$V2, posVel$V1, ix0 = 600, ivf = 1.5, ik = 0.001, iN = 1)
####################################################################################
#Flexible Logistic Function: Function from Morris & Silk 1992 equation (Equation 8)
####################################################################################
flf <- function(x,x0,vf,k,n){
(vf)/(1+exp(-k*(x-x0)))^(1/n)
}
m <- fflf(posVel$V2, posVel$V1, ix0 = 600, ivf = 1.5, ik = 0.001, iN = 1)
View()
View(m)
predict(m)
plot(posVel$V1, predict(m))
plot(posVel$V1, posVel$V2)
lines(posVel$V1, predict(m))
plot(posVel$V1, posVel$V2)
lines(posVel$V1, predict(m), col=”red”)
library(ggplot2)
ggplot(data = posVel, aes(x = posVel$V1)) +
geom_point(aes(posVel$V2)) +
geom_point(data = predict(m))
dataFit = data.frame(posVel$V1, predict(m))
View(dataFit)
ggplot(data = posVel, aes(x = posVel$V1)) +
geom_point(aes(posVel$V2)) +
geom_point(dataFit aes(y = predict(m)))
ggplot(data = posVel, aes(x = posVel$V1)) +
geom_point(aes(posVel$V2)) +
geom_point(data= dataFit, aes(y = predict(m)))
ggplot(data = posVel, aes(x = posVel$V1)) +
geom_point(aes(posVel$V2)) +
geom_point(data = dataFit, aes(y = predict(m)))
ggplot(data = posVel, aes(x = posVel$V1)) +
geom_point(aes(posVel$V2)) +
geom_point(data = dataFit, aes(y = dataFit$predict.m.))
ggplot(data = posVel, aes(x = posVel$V1)) +
geom_point(aes(posVel$V2)) +
geom_point(data = dataFit, aes(y = predict.m.))
dataFit = data.frame(posVel$V1, predict(m)) %>%
rename(V1 = pos,
predict.m. = fittedVel)
library(dplyr)
dataFit = data.frame(posVel$V1, predict(m)) %>%
rename(V1 = pos,
predict.m. = fittedVel)
dataFit = data.frame(posVel$V1, predict(m)) %>%
rename(pos = poV1s,
fittedVel = predict.m.)
dataFit = data.frame(posVel$V1, predict(m))
dataFit = data.frame(posVel$V1, predict(m)) %>%
rename(pos = V1,
fittedVel = predict.m.)
dataFit = data.frame(posVel$V1, predict(m)) %>%
rename(pos = posVel.V1,
fittedVel = predict.m.)
ggplot(data = posVel, aes(x = posVel$V1)) +
geom_point(aes(posVel$V2)) +
geom_point(data = dataFit, aes(y = fittedVel))
ggplot(data = posVel, aes(x = posVel$V1)) +
geom_point(aes(y = posVel$V2)) +
geom_point(data = dataFit, aes(y = fittedVel))
ggplot(data = posVel, aes(x = posVel$V1)) +
geom_point(aes(y = posVel$V2)) +
geom_point(data = dataFit, aes(y = fittedVel), color = "blue")
posVel = read.csv("~/Desktop/RILPop_tmp/RIL1_1/RIL1--RIL1_005_3--/rawData.csv", header = FALSE)
dataFit = data.frame(posVel$V1, predict(m)) %>%
rename(pos = posVel.V1,
fittedVel = predict.m.)
m <- fflf(posVel$V2, posVel$V1, ix0 = 600, ivf = 1.5, ik = 0.001, iN = 1)
m <- fflf(posVel$V2, posVel$V1, ix0 = 600, ivf = 1.5, ik = 0.001, iN = 1)
unique(posVel$V1)
posVel$V1
m <- fflf(posVel$V2, posVel$V1, ix0 = 650, ivf = 1, ik = 0.0015, iN = 1.3)
posVel = read.csv("~/Desktop/RILPop_tmp/RIL1_1/RIL1--RIL1_001_1.5--/rawData.csv", header = FALSE)
m <- fflf(posVel$V2, posVel$V1, ix0 = 650, ivf = 1, ik = 0.0015, iN = 1.3)
# Hard coded x and y values:
y = c(5, 42, 6, 2, 0)
x = c(1, 2, 3, 4, 5)
f <- y ~ m*x + b
nls(f, start=list(m=1, b=1))
fflf <- function(y, x, ix0, ivf, ik, iN){
f <- y ~ (vf)/(1+exp(-k*(x-x0)))^(1/n)
m <- nls(f, start = list(x0 = ix0, vf = ivf, k = ik, n = iN))
m
}
x
rm(x)
rm(y)
ix0
fflf <- function(y, x, ix0, ivf, ik, iN){
f <- y ~ (vf)/(1+exp(-k*(x-x0)))^(1/n)
m <- nls(f, start = list(x0 = ix0, vf = ivf, k = ik, n = iN))
m
}
m <- fflf(posVel$V2, posVel$V1, ix0 = 650, ivf = 1, ik = 0.0015, iN = 1.3)
posVel = read.csv("~/Desktop/RILPop_tmp/RIL1_1/RIL1--RIL1_001_1.5--/rawData.csv", header = FALSE)
m <- fflf(posVel$V2, posVel$V1, ix0 = 650, ivf = 1, ik = 0.0015, iN = 1.3)
m <- fflf(posVel$V2, posVel$V1, ix0 = 600, ivf = 1, ik = 0.001, iN = 1)
fflf(posVel$V2, posVel$V1, ix0 = 600, ivf = 1.5, ik = 0.001, iN = 1)
m <- fflf(posVel$V2, posVel$V1, ix0 = 600, ivf = 1.5, ik = 0.001, iN = 1)
m <- fflf(posVel$V2, posVel$V1, ix0 = 600, ivf = 1.5, ik = 0.001, iN = 1)
# Soft-coded x and y values, with real data:
posVel = read.csv("~/Desktop/RILPop_tmp/RIL1_1/RIL1--RIL1_005_3--/rawData.csv", header = FALSE)
m <- fflf(posVel$V2, posVel$V1, ix0 = 600, ivf = 1.5, ik = 0.001, iN = 1)
m
m <- fflf(posVel$V2, posVel$V1, ix0 = 350, ivf = 1.2, ik = 0.008, iN = 0.6)
dataFit = data.frame(posVel$V1, predict(m)) %>%
rename(pos = posVel.V1,
fittedVel = predict.m.)
ggplot(data = posVel, aes(x = posVel$V1)) +
geom_point(aes(y = posVel$V2)) +
geom_point(data = dataFit, aes(y = fittedVel), color = "blue")
####################################################################################
#Flexible Logistic Function: Function from Morris & Silk 1992 equation (Equation 8)
####################################################################################
flf <- function(x,x0,vf,k,n){
(vf)/(1+exp(-k*(x-x0)))^(1/n)
}
####################################################################################
########### Fitting with nls() to get parameters that better fit the data ##########
####################################################################################
fflf <- function(y, x, ix0, ivf, ik, iN){
f <- y ~ (vf)/(1+exp(-k*(x-x0)))^(1/n)
m <- nls(f, start = list(x0 = ix0, vf = ivf, k = ik, n = iN))
m
}
# Soft-coded x and y values, with real data:
posVel = read.csv("~/Desktop/RILPop_tmp/RIL1_1/RIL1--RIL1_001_1.5--/rawData.csv", header = FALSE)
# Best starting values for RIL1_005, using RIL1_001 parameters
m <- fflf(posVel$V2, posVel$V1, ix0 = 350, ivf = 1.2, ik = 0.008, iN = 0.6)
summary(m)
s <- summary(m)
s$parameters
s$parameters[[1]]
s$parameters[[x0]]
class(s$parameters)
s$coefficients
s$coefficients[[x0]]
s$coefficients"x0"
s$coefficients$x0
s$coefficients[["x0"]]
s$coefficients[[1,"x0"]]
s$coefficients[["x0",1]]
s$coefficients[["x0",2]]
s$coefficients[["vf",1]]
s$coefficients[["vf","estimates"]]
s$coefficients[["vf","Estimate"]]
### Gets flf package loaded into environment ###
# install.packages("backports")
# install.packages("rcmdcheck")
# install.packages("devtools")
# install.packages("rowr")
# install.packages("plotly")
# install.packages("naniar")
# setwd("/Users/ashleyhenry/")
devtools::load_all('/Users/ashleyhenry/flf')
library(flf)
### Below is copied from AnalyzeKinematicAnalysisToolOutput.Rmd
### Creates path with folder of folders, each with one rawData.csv file
### Loads in all of the rawData.csv files ###
# masterPath <- "/Users/ashleyhenry/Desktop/controlLer_outlierTests"
masterPath <- "/Users/ashleyhenry/Desktop/RILPop_tmp"
res <- processMasterFolder(masterPath)
devtools::load_all('/Users/ashleyhenry/flf')
library(flf)
res <- processMasterFolder(masterPath)
devtools::load_all('/Users/ashleyhenry/flf')
library(flf)
res <- processMasterFolder(masterPath)
devtools::load_all('/Users/ashleyhenry/flf')
library(flf)
res <- processMasterFolder(masterPath)
res
coeffs
res
### Below is copied from AnalyzeKinematicAnalysisToolOutput.Rmd
### Creates path with folder of folders, each with one rawData.csv file
### Loads in all of the rawData.csv files ###
# masterPath <- "/Users/ashleyhenry/Desktop/controlLer_outlierTests"
masterPath <- "/Users/ashleyhenry/Desktop/RILPop_tmp"
devtools::load_all('/Users/ashleyhenry/flf')
library(flf)
res <- processMasterFolder(masterPath)
re
res
View(res)
class(res[[1]]$summary_table)
summary(m)
s$residuals
mean(s$residuals)
source('~/kinematics-flf/flf/R/flf.R')
devtools::load_all('/Users/ashleyhenry/flf')
library(flf)
res <- processMasterFolder(masterPath)
devtools::load_all('/Users/ashleyhenry/flf')
library(flf)
res <- processMasterFolder(masterPath)
devtools::load_all('/Users/ashleyhenry/flf')
library(flf)
res <- processMasterFolder(masterPath)
debugSource('~/kinematics-flf/flf/R/flf.R')
devtools::load_all('/Users/ashleyhenry/flf')
devtools::load_all('/Users/ashleyhenry/flf')
library(flf)
res <- processMasterFolder(masterPath)
devtools::load_all('/Users/ashleyhenry/flf')
devtools::load_all('/Users/ashleyhenry/flf')
library(flf)
library(flf)
res <- processMasterFolder(masterPath)
debugSource('~/kinematics-flf/flf/R/flf.R')
debugSource('~/kinematics-flf/flf/R/flf.R')
devtools::load_all('/Users/ashleyhenry/flf')
devtools::load_all('/Users/ashleyhenry/flf')
library(flf)
res <- processMasterFolder(masterPath)
fflf(vel, pos, x0i, vfi, ki, ni)
q <- fflf(vel, pos, x0i, vfi, ki, ni)
q
class(q)
q <- fflf(vel, pos, x0i, vfi, ki, ni)
debugSource('~/kinematics-flf/flf/R/flf.R')
debugSource('~/kinematics-flf/flf/R/flf.R')
devtools::load_all('/Users/ashleyhenry/flf')
devtools::load_all('/Users/ashleyhenry/flf')
library(flf)
res <- processMasterFolder(masterPath)
1/1024
debugSource('~/kinematics-flf/flf/R/flf.R')
devtools::load_all('/Users/ashleyhenry/flf')
devtools::load_all('/Users/ashleyhenry/flf')
library(flf)
res <- processMasterFolder(masterPath)
m <- nls(f, start = list(x0 = ix0, vf = ivf, k = ik, n = iN), control = con)
con <- nls.control(maxiter = 100, tol = 1e-05, minFactor = 1/256,
printEval = FALSE, warnOnly = FALSE)
m <- nls(f, start = list(x0 = ix0, vf = ivf, k = ik, n = iN), control = con)
con <- nls.control(maxiter = 100, tol = 1e-05, minFactor = 1/16,
printEval = FALSE, warnOnly = FALSE)
m <- nls(f, start = list(x0 = ix0, vf = ivf, k = ik, n = iN), control = con)
con <- nls.control(maxiter = 100, tol = 1e-05, minFactor = 1/1024,
printEval = FALSE, warnOnly = TRUE)
m <- nls(f, start = list(x0 = ix0, vf = ivf, k = ik, n = iN), control = con)
m
1564/length(x)
s$residuals
mean(s$residuals)
1564/length(x)
s <- summary(m)
mean(s$residuals)
source('~/kinematics-flf/flf/R/flf.R')
### Gets flf package loaded into environment ###
# install.packages("backports")
# install.packages("rcmdcheck")
# install.packages("devtools")
# install.packages("rowr")
# install.packages("plotly")
# install.packages("naniar")
# setwd("/Users/ashleyhenry/")
devtools::load_all('/Users/ashleyhenry/flf')
library(flf)
library(ggplot2)
library(plotly)
library(tidyverse)
library(readr)
library(rowr)
require(reshape2)
library(dplyr)
library(naniar)
### Below is copied from AnalyzeKinematicAnalysisToolOutput.Rmd
### Creates path with folder of folders, each with one rawData.csv file
### Loads in all of the rawData.csv files ###
# masterPath <- "/Users/ashleyhenry/Desktop/controlLer_outlierTests"
masterPath <- "/Users/ashleyhenry/Desktop/RILPop_tmp"
devtools::load_all('/Users/ashleyhenry/flf')
devtools::load_all('/Users/ashleyhenry/flf')
library(flf)
res <- processMasterFolder(masterPath)
View(res)
debugSource('~/kinematics-flf/flf/R/flf.R')
devtools::load_all('/Users/ashleyhenry/flf')
library(flf)
res <- processMasterFolder(masterPath)
debugSource('~/kinematics-flf/flf/R/flf.R')
devtools::load_all('/Users/ashleyhenry/flf')
devtools::load_all('/Users/ashleyhenry/flf')
library(flf)
res <- processMasterFolder(masterPath)
debugSource('~/kinematics-flf/flf/R/flf.R')
devtools::load_all('/Users/ashleyhenry/flf')
library(flf)
res <- processMasterFolder(masterPath)
# Soft-coded x and y values, with real data:
posVel = read.csv("~/Desktop/RILPop_tmp/RIL1_1/RIL1--RIL1_001_1.5--/rawData.csv", header = FALSE)
# Soft-coded x and y values, with real data:
posVel = read.csv("~/Desktop/RILPop_tmp/RIL1/RIL1--RIL1_001_1.5--/rawData.csv", header = FALSE)
m
# posVel = read.csv("~/Desktop/RILPop_tmp/RIL1_1/RIL1--RIL1_005_3--/rawData.csv", header = FALSE)
#
# # Best starting values for RIL1_005, using RIL1_001 parameters
# m <- fflf(posVel$V2, posVel$V1, ix0 = 350, ivf = 1.2, ik = 0.008, iN = 0.6)
s <- summary(m)
# s$coefficients[["x0", "Estimate"]] # provides x0's value for that rawData.csv
#
# # Best starting values for RIL1_001 with guessing parameters
# m <- fflf(posVel$V2, posVel$V1, ix0 = 600, ivf = 1.5, ik = 0.001, iN = 1)
#
# dataFit = data.frame(posVel$V1, predict(m)) %>%
#   rename(pos = posVel.V1,
#          fittedVel = predict.m.)
#
ggplot(data = posVel, aes(x = posVel$V1)) +
geom_point(aes(y = posVel$V2)) +
geom_point(data = dataFit, aes(y = fittedVel), color = "blue")
# s$coefficients[["x0", "Estimate"]] # provides x0's value for that rawData.csv
#
# # Best starting values for RIL1_001 with guessing parameters
# m <- fflf(posVel$V2, posVel$V1, ix0 = 600, ivf = 1.5, ik = 0.001, iN = 1)
#
dataFit = data.frame(posVel$V1, predict(m)) %>%
rename(pos = posVel.V1,
fittedVel = predict.m.)
#
ggplot(data = posVel, aes(x = posVel$V1)) +
geom_point(aes(y = posVel$V2)) +
geom_point(data = dataFit, aes(y = fittedVel), color = "blue")
ggplot(data = posVel, aes(x = posVel$V1)) +
geom_point(aes(y = posVel$V2)) +
geom_point(data = dataFit, aes(y = fittedVel), color = "blue")
ggplot(data = posVel, aes(x = posVel$V1)) +
geom_point(aes(y = posVel$V2)) +
geom_point(data = dataFit, aes(y = fittedVel), color = "blue")
# Soft-coded x and y values, with real data:
posVel = read.csv("~/Desktop/RILPop_tmp/RIL1/RIL1--RIL1_001_1.5--/rawData.csv", header = FALSE)
# posVel = read.csv("~/Desktop/RILPop_tmp/RIL1_1/RIL1--RIL1_005_3--/rawData.csv", header = FALSE)
#
# # Best starting values for RIL1_005, using RIL1_001 parameters
# m <- fflf(posVel$V2, posVel$V1, ix0 = 350, ivf = 1.2, ik = 0.008, iN = 0.6)
s <- summary(m)
debugSource('~/kinematics-flf/flf/R/flf.R')
devtools::load_all('/Users/ashleyhenry/flf')
library(flf)
res <- processMasterFolder(masterPath)
# Soft-coded x and y values, with real data:
posVel = read.csv("~/Desktop/RILPop_tmp/RIL1/RIL1--RIL1_001_1.5--/rawData.csv", header = FALSE)
res
res[[1]]$rawData[[2]]
View(res[[1]]$rawData[[2]])
# #
ggplot(data = res, aes(x = res[[1]]$rawData[[2]]$pos)) +
geom_point(aes(y = res[[1]]$rawData[[2]]$pos$vel))
# dataFit = data.frame(posVel$pos, predict(m)) %>%
data = data.frame(res[[1]]$rawData[[2]]$pos, res[[1]]$rawData[[2]]$vel)
dataFit = data.frame(res[[1]]$rawData[[2]]$pos, predict(m)) %>%
rename(pos = posVel.V1,
fittedVel = predict.m.)
dataFit = data.frame(res[[1]]$rawData[[2]]$pos, predict(m)) #%>%
data = data.frame(res[[1]]$rawData[[2]]$pos, res[[1]]$rawData[[2]]$vel)
# #
ggplot(data = data, aes(x = res[[1]]$rawData[[2]]$pos)) +
geom_point(aes(y = res[[1]]$rawData[[2]]$pos$vel))
# #
ggplot(data = data, aes(x = res[[1]]$rawData[[2]]$pos)) #+
# #
ggplot(data = data, aes(x = res[[1]]$rawData[[2]]$pos)) +
geom_point(aes(y = res[[1]]$rawData[[2]]$vel))
plot(data)
